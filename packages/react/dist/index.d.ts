import * as _stitches_react_types_styled_component from '@stitches/react/types/styled-component';
import * as _stitches_react_types_css_util from '@stitches/react/types/css-util';
import * as react from 'react';
import { ComponentProps, ElementType, ReactNode } from 'react';
import * as _radix_ui_themes_dist_cjs_components_box from '@radix-ui/themes/dist/cjs/components/box';
import * as react_jsx_runtime from 'react/jsx-runtime';
import * as Avatar$1 from '@radix-ui/react-avatar';
import { IconProps } from 'phosphor-react';
import { IconBaseProps } from 'react-icons';
import * as Checkbox$1 from '@radix-ui/react-checkbox';
import { Props } from 'react-select';
import * as Select$1 from '@radix-ui/react-select';
import * as _radix_ui_themes_dist_cjs_components_grid from '@radix-ui/themes/dist/cjs/components/grid';
import * as Dialog$1 from '@radix-ui/react-dialog';
import * as _stitches_react_types_theme from '@stitches/react/types/theme';
import * as _stitches_react_types_css from '@stitches/react/types/css';
import * as _stitches_react_types_stitches from '@stitches/react/types/stitches';
import * as _stitches_react_types_util from '@stitches/react/types/util';

declare const Box: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<_radix_ui_themes_dist_cjs_components_box.BoxProps & react.RefAttributes<HTMLDivElement>>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
type BoxProps = ComponentProps<typeof Box>;

declare const Text: _stitches_react_types_styled_component.StyledComponent<"p", {
    size?: "xxs" | "xs" | "sm" | "md" | "lg" | "xl" | "2xl" | "4xl" | "5xl" | "6xl" | "7xl" | "8xl" | "9xl" | undefined;
}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface TextProps extends ComponentProps<typeof Text> {
    as?: ElementType;
}

declare const Heading: _stitches_react_types_styled_component.StyledComponent<"h2", {
    size?: "sm" | "md" | "lg" | "2xl" | "4xl" | "5xl" | "6xl" | "3xl" | undefined;
}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface HeadingProps extends ComponentProps<typeof Heading> {
    as?: ElementType;
}

declare const AvatarImage: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Avatar$1.AvatarImageProps & react.RefAttributes<HTMLImageElement>>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

type AvatarProps = ComponentProps<typeof AvatarImage>;
declare function Avatar(props: AvatarProps): react_jsx_runtime.JSX.Element;
declare namespace Avatar {
    var displayName: string;
}

declare const Button: _stitches_react_types_styled_component.StyledComponent<"button", {
    variant?: "primary" | "secondary" | "tertiary" | undefined;
    size?: "sm" | "md" | "lg" | undefined;
}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
interface ButtonProps extends ComponentProps<typeof Button> {
    as?: ElementType;
}

interface TooltipProps {
    title: string;
    className?: string;
    children: ReactNode;
}
declare function Tooltip({ title, className, children }: TooltipProps): react_jsx_runtime.JSX.Element;
declare namespace Tooltip {
    var displayName: string;
}

declare const TextInputContainer: _stitches_react_types_styled_component.StyledComponent<"div", {
    error?: boolean | "true" | undefined;
    size?: "sm" | "md" | undefined;
}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const Input: _stitches_react_types_styled_component.StyledComponent<"input", {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

interface TextInputProps extends Omit<ComponentProps<typeof Input>, 'size'> {
    error?: string;
    size?: ComponentProps<typeof TextInputContainer>['size'];
    startIcon?: React.ComponentType<IconProps | IconBaseProps>;
}
declare const TextInput: react.ForwardRefExoticComponent<Omit<TextInputProps, "ref"> & react.RefAttributes<HTMLInputElement>>;

declare const TextArea: _stitches_react_types_styled_component.StyledComponent<"textarea", {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
type TextAreaProps = ComponentProps<typeof TextArea>;

declare const CheckboxContainer: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Checkbox$1.CheckboxProps & react.RefAttributes<HTMLButtonElement>>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

type CheckboxProps = ComponentProps<typeof CheckboxContainer>;
declare function Checkbox(props: CheckboxProps): react_jsx_runtime.JSX.Element;
declare namespace Checkbox {
    var displayName: string;
}

interface MultiStepProps {
    size: number;
    currentStep?: number;
}
declare function MultiStep({ size, currentStep }: MultiStepProps): react_jsx_runtime.JSX.Element;
declare namespace MultiStep {
    var displayName: string;
}

interface Option {
    value: string;
    label: string;
}
interface SelectAdvancedProps extends Props {
    name: string;
    error?: string;
    isChangeDoneIcon?: Option[] | null | undefined;
}
declare function SelectAdvanced({ name, error, ...props }: SelectAdvancedProps): react_jsx_runtime.JSX.Element;
declare namespace SelectAdvanced {
    var displayName: string;
}

interface ToastSingleMessage {
    id: string;
    type?: 'success' | 'error' | 'info';
    title: string;
    description?: string;
}

interface ToastProps {
    messages: ToastSingleMessage[];
    removeToast(id: string): void;
}
declare function Toast({ messages, removeToast }: ToastProps): react_jsx_runtime.JSX.Element;
declare namespace Toast {
    var displayName: string;
}

declare const SelectContainer: _stitches_react_types_styled_component.StyledComponent<react.FC<Select$1.SelectProps>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const SelectItemContainer: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Select$1.SelectItemProps & react.RefAttributes<HTMLDivElement>>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

type SelectProps = ComponentProps<typeof SelectContainer>;
declare function Select(props: SelectProps): react_jsx_runtime.JSX.Element;
declare namespace Select {
    var displayName: string;
}
type SelectItemProps = ComponentProps<typeof SelectItemContainer>;

declare const Grid: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<_radix_ui_themes_dist_cjs_components_grid.GridProps & react.RefAttributes<HTMLDivElement>>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
type GridProps = ComponentProps<typeof Grid>;

interface DialogProps {
    children: ReactNode;
    title: string;
    container?: HTMLElement;
    offClosed?: boolean;
}
declare function Dialog({ children, title, container, offClosed, }: DialogProps): react_jsx_runtime.JSX.Element;
declare namespace Dialog {
    var displayName: string;
}

declare const DialogRoot: _stitches_react_types_styled_component.StyledComponent<react.FC<Dialog$1.DialogProps>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const DialogTrigger: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Dialog$1.DialogTriggerProps & react.RefAttributes<HTMLButtonElement>>, {}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const DialogClose: _stitches_react_types_styled_component.StyledComponent<react.ForwardRefExoticComponent<Dialog$1.DialogCloseProps & react.RefAttributes<HTMLButtonElement>>, {
    variant?: "primary" | "secondary" | "tertiary" | undefined;
    size?: "sm" | "md" | "lg" | undefined;
}, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;

declare const styled: <Type extends _stitches_react_types_util.Function | react.ComponentType<any> | keyof JSX.IntrinsicElements, Composers extends (string | _stitches_react_types_util.Function | react.ComponentType<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(type: Type, ...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.ComponentType<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : _stitches_react_types_util.WideObject) | undefined;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => _stitches_react_types_styled_component.StyledComponent<Type, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>;
declare const css: <Composers extends (string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> | {
    [name: string]: unknown;
})[], CSS = _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>>(...composers: { [K in keyof Composers]: string extends Composers[K] ? Composers[K] : Composers[K] extends string | _stitches_react_types_util.Function | react.JSXElementConstructor<any> | react.ExoticComponent<any> ? Composers[K] : _stitches_react_types_stitches.RemoveIndex<CSS> & {
    variants?: {
        [x: string]: {
            [x: string]: CSS;
            [x: number]: CSS;
        };
    } | undefined;
    compoundVariants?: (("variants" extends keyof Composers[K] ? { [Name in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name]> | undefined; } : _stitches_react_types_util.WideObject) & {
        css: CSS;
    })[] | undefined;
    defaultVariants?: ("variants" extends keyof Composers[K] ? { [Name_1 in keyof Composers[K][keyof Composers[K] & "variants"]]?: _stitches_react_types_util.String | _stitches_react_types_util.Widen<keyof Composers[K][keyof Composers[K] & "variants"][Name_1]> | undefined; } : _stitches_react_types_util.WideObject) | undefined;
} & CSS & { [K2 in keyof Composers[K]]: K2 extends "compoundVariants" | "defaultVariants" | "variants" ? unknown : K2 extends keyof CSS ? CSS[K2] : unknown; }; }) => _stitches_react_types_styled_component.CssComponent<_stitches_react_types_styled_component.StyledComponentType<Composers>, _stitches_react_types_styled_component.StyledComponentProps<Composers>, {
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, CSS>;
declare const globalCss: <Styles extends {
    [K: string]: any;
}>(...styles: ({
    '@import'?: unknown;
    '@font-face'?: unknown;
} & { [K in keyof Styles]: K extends "@import" ? string | string[] : K extends "@font-face" ? _stitches_react_types_css.AtRule.FontFace | _stitches_react_types_css.AtRule.FontFace[] : K extends `@keyframes ${string}` ? {
    [x: string]: _stitches_react_types_css_util.CSS<{
        $xs: "@media (min-width: 480px)";
        $sm: "@media (min-width: 640px)";
        $md: "@media (min-width: 1024px)";
        $lg: "@media (min-width: 1280px)";
    }, {
        colors: {
            white: string;
            black: string;
            gray100: string;
            gray150: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            alosixG200: string;
            alosixG300: string;
            alosixG500: string;
            alosixY100: string;
            alosixY300: string;
            alosixY500: string;
            alosixR200: string;
            alosixR500: string;
            alosixR700: string;
        };
        fontSizes: {
            xxs: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '4xl': string;
            '5xl': string;
            '6xl': string;
            '7xl': string;
            '8xl': string;
            '9xl': string;
        };
        fontWeights: {
            regular: string;
            medium: string;
            bold: string;
        };
        fonts: {
            default: string;
            code: string;
        };
        lineHeights: {
            shorter: string;
            short: string;
            base: string;
            tall: string;
        };
        radii: {
            px: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            full: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            10: string;
            12: string;
            16: string;
            20: string;
            40: string;
            64: string;
            80: string;
        };
        boxShadow: {
            white: string;
            black: string;
            gray100: string;
            gray150: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            alosixG200: string;
            alosixG300: string;
            alosixG500: string;
            alosixY100: string;
            alosixY300: string;
            alosixY500: string;
            alosixR200: string;
            alosixR500: string;
            alosixR700: string;
        };
    }, {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
} : K extends `@property ${string}` ? _stitches_react_types_css.AtRule.Property : _stitches_react_types_css_util.CSS<{
    $xs: "@media (min-width: 480px)";
    $sm: "@media (min-width: 640px)";
    $md: "@media (min-width: 1024px)";
    $lg: "@media (min-width: 1280px)";
}, {
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    fontSizes: {
        xxs: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        xl: string;
        '2xl': string;
        '4xl': string;
        '5xl': string;
        '6xl': string;
        '7xl': string;
        '8xl': string;
        '9xl': string;
    };
    fontWeights: {
        regular: string;
        medium: string;
        bold: string;
    };
    fonts: {
        default: string;
        code: string;
    };
    lineHeights: {
        shorter: string;
        short: string;
        base: string;
        tall: string;
    };
    radii: {
        px: string;
        xs: string;
        sm: string;
        md: string;
        lg: string;
        full: string;
    };
    space: {
        1: string;
        2: string;
        3: string;
        4: string;
        5: string;
        6: string;
        7: string;
        8: string;
        10: string;
        12: string;
        16: string;
        20: string;
        40: string;
        64: string;
        80: string;
    };
    boxShadow: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
}, {
    height: "space";
    width: "space";
    gap: "space";
    gridGap: "space";
    columnGap: "space";
    gridColumnGap: "space";
    rowGap: "space";
    gridRowGap: "space";
    inset: "space";
    insetBlock: "space";
    insetBlockEnd: "space";
    insetBlockStart: "space";
    insetInline: "space";
    insetInlineEnd: "space";
    insetInlineStart: "space";
    margin: "space";
    marginTop: "space";
    marginRight: "space";
    marginBottom: "space";
    marginLeft: "space";
    marginBlock: "space";
    marginBlockEnd: "space";
    marginBlockStart: "space";
    marginInline: "space";
    marginInlineEnd: "space";
    marginInlineStart: "space";
    padding: "space";
    paddingTop: "space";
    paddingRight: "space";
    paddingBottom: "space";
    paddingLeft: "space";
    paddingBlock: "space";
    paddingBlockEnd: "space";
    paddingBlockStart: "space";
    paddingInline: "space";
    paddingInlineEnd: "space";
    paddingInlineStart: "space";
    scrollMargin: "space";
    scrollMarginTop: "space";
    scrollMarginRight: "space";
    scrollMarginBottom: "space";
    scrollMarginLeft: "space";
    scrollMarginBlock: "space";
    scrollMarginBlockEnd: "space";
    scrollMarginBlockStart: "space";
    scrollMarginInline: "space";
    scrollMarginInlineEnd: "space";
    scrollMarginInlineStart: "space";
    scrollPadding: "space";
    scrollPaddingTop: "space";
    scrollPaddingRight: "space";
    scrollPaddingBottom: "space";
    scrollPaddingLeft: "space";
    scrollPaddingBlock: "space";
    scrollPaddingBlockEnd: "space";
    scrollPaddingBlockStart: "space";
    scrollPaddingInline: "space";
    scrollPaddingInlineEnd: "space";
    scrollPaddingInlineStart: "space";
    top: "space";
    right: "space";
    bottom: "space";
    left: "space";
    fontSize: "fontSizes";
    background: "colors";
    backgroundColor: "colors";
    backgroundImage: "colors";
    borderImage: "colors";
    border: "colors";
    borderBlock: "colors";
    borderBlockEnd: "colors";
    borderBlockStart: "colors";
    borderBottom: "colors";
    borderBottomColor: "colors";
    borderColor: "colors";
    borderInline: "colors";
    borderInlineEnd: "colors";
    borderInlineStart: "colors";
    borderLeft: "colors";
    borderLeftColor: "colors";
    borderRight: "colors";
    borderRightColor: "colors";
    borderTop: "colors";
    borderTopColor: "colors";
    caretColor: "colors";
    color: "colors";
    columnRuleColor: "colors";
    outline: "colors";
    outlineColor: "colors";
    fill: "colors";
    stroke: "colors";
    textDecorationColor: "colors";
    fontFamily: "fonts";
    fontWeight: "fontWeights";
    lineHeight: "lineHeights";
    letterSpacing: "letterSpacings";
    blockSize: "sizes";
    minBlockSize: "sizes";
    maxBlockSize: "sizes";
    inlineSize: "sizes";
    minInlineSize: "sizes";
    maxInlineSize: "sizes";
    minWidth: "sizes";
    maxWidth: "sizes";
    minHeight: "sizes";
    maxHeight: "sizes";
    flexBasis: "sizes";
    gridTemplateColumns: "sizes";
    gridTemplateRows: "sizes";
    borderWidth: "borderWidths";
    borderTopWidth: "borderWidths";
    borderLeftWidth: "borderWidths";
    borderRightWidth: "borderWidths";
    borderBottomWidth: "borderWidths";
    borderStyle: "borderStyles";
    borderTopStyle: "borderStyles";
    borderLeftStyle: "borderStyles";
    borderRightStyle: "borderStyles";
    borderBottomStyle: "borderStyles";
    borderRadius: "radii";
    borderTopLeftRadius: "radii";
    borderTopRightRadius: "radii";
    borderBottomRightRadius: "radii";
    borderBottomLeftRadius: "radii";
    boxShadow: "shadows";
    textShadow: "shadows";
    transition: "transitions";
    zIndex: "zIndices";
}, {}>; })[]) => () => string;
declare const keyframes: (style: {
    [offset: string]: _stitches_react_types_css_util.CSS<{
        $xs: "@media (min-width: 480px)";
        $sm: "@media (min-width: 640px)";
        $md: "@media (min-width: 1024px)";
        $lg: "@media (min-width: 1280px)";
    }, {
        colors: {
            white: string;
            black: string;
            gray100: string;
            gray150: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            alosixG200: string;
            alosixG300: string;
            alosixG500: string;
            alosixY100: string;
            alosixY300: string;
            alosixY500: string;
            alosixR200: string;
            alosixR500: string;
            alosixR700: string;
        };
        fontSizes: {
            xxs: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '4xl': string;
            '5xl': string;
            '6xl': string;
            '7xl': string;
            '8xl': string;
            '9xl': string;
        };
        fontWeights: {
            regular: string;
            medium: string;
            bold: string;
        };
        fonts: {
            default: string;
            code: string;
        };
        lineHeights: {
            shorter: string;
            short: string;
            base: string;
            tall: string;
        };
        radii: {
            px: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            full: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            10: string;
            12: string;
            16: string;
            20: string;
            40: string;
            64: string;
            80: string;
        };
        boxShadow: {
            white: string;
            black: string;
            gray100: string;
            gray150: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            alosixG200: string;
            alosixG300: string;
            alosixG500: string;
            alosixY100: string;
            alosixY300: string;
            alosixY500: string;
            alosixR200: string;
            alosixR500: string;
            alosixR700: string;
        };
    }, {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    }, {}>;
}) => {
    (): string;
    name: string;
};
declare const getCssText: () => string;
declare const theme: string & {
    className: string;
    selector: string;
} & {
    colors: {
        white: _stitches_react_types_theme.Token<"white", string, "colors", "">;
        black: _stitches_react_types_theme.Token<"black", string, "colors", "">;
        gray100: _stitches_react_types_theme.Token<"gray100", string, "colors", "">;
        gray150: _stitches_react_types_theme.Token<"gray150", string, "colors", "">;
        gray200: _stitches_react_types_theme.Token<"gray200", string, "colors", "">;
        gray300: _stitches_react_types_theme.Token<"gray300", string, "colors", "">;
        gray400: _stitches_react_types_theme.Token<"gray400", string, "colors", "">;
        gray500: _stitches_react_types_theme.Token<"gray500", string, "colors", "">;
        gray600: _stitches_react_types_theme.Token<"gray600", string, "colors", "">;
        gray700: _stitches_react_types_theme.Token<"gray700", string, "colors", "">;
        gray800: _stitches_react_types_theme.Token<"gray800", string, "colors", "">;
        alosixG200: _stitches_react_types_theme.Token<"alosixG200", string, "colors", "">;
        alosixG300: _stitches_react_types_theme.Token<"alosixG300", string, "colors", "">;
        alosixG500: _stitches_react_types_theme.Token<"alosixG500", string, "colors", "">;
        alosixY100: _stitches_react_types_theme.Token<"alosixY100", string, "colors", "">;
        alosixY300: _stitches_react_types_theme.Token<"alosixY300", string, "colors", "">;
        alosixY500: _stitches_react_types_theme.Token<"alosixY500", string, "colors", "">;
        alosixR200: _stitches_react_types_theme.Token<"alosixR200", string, "colors", "">;
        alosixR500: _stitches_react_types_theme.Token<"alosixR500", string, "colors", "">;
        alosixR700: _stitches_react_types_theme.Token<"alosixR700", string, "colors", "">;
    };
    fontSizes: {
        xxs: _stitches_react_types_theme.Token<"xxs", string, "fontSizes", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "fontSizes", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "fontSizes", "">;
        md: _stitches_react_types_theme.Token<"md", string, "fontSizes", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "fontSizes", "">;
        xl: _stitches_react_types_theme.Token<"xl", string, "fontSizes", "">;
        '2xl': _stitches_react_types_theme.Token<"2xl", string, "fontSizes", "">;
        '4xl': _stitches_react_types_theme.Token<"4xl", string, "fontSizes", "">;
        '5xl': _stitches_react_types_theme.Token<"5xl", string, "fontSizes", "">;
        '6xl': _stitches_react_types_theme.Token<"6xl", string, "fontSizes", "">;
        '7xl': _stitches_react_types_theme.Token<"7xl", string, "fontSizes", "">;
        '8xl': _stitches_react_types_theme.Token<"8xl", string, "fontSizes", "">;
        '9xl': _stitches_react_types_theme.Token<"9xl", string, "fontSizes", "">;
    };
    fontWeights: {
        regular: _stitches_react_types_theme.Token<"regular", string, "fontWeights", "">;
        medium: _stitches_react_types_theme.Token<"medium", string, "fontWeights", "">;
        bold: _stitches_react_types_theme.Token<"bold", string, "fontWeights", "">;
    };
    fonts: {
        default: _stitches_react_types_theme.Token<"default", string, "fonts", "">;
        code: _stitches_react_types_theme.Token<"code", string, "fonts", "">;
    };
    lineHeights: {
        shorter: _stitches_react_types_theme.Token<"shorter", string, "lineHeights", "">;
        short: _stitches_react_types_theme.Token<"short", string, "lineHeights", "">;
        base: _stitches_react_types_theme.Token<"base", string, "lineHeights", "">;
        tall: _stitches_react_types_theme.Token<"tall", string, "lineHeights", "">;
    };
    radii: {
        px: _stitches_react_types_theme.Token<"px", string, "radii", "">;
        xs: _stitches_react_types_theme.Token<"xs", string, "radii", "">;
        sm: _stitches_react_types_theme.Token<"sm", string, "radii", "">;
        md: _stitches_react_types_theme.Token<"md", string, "radii", "">;
        lg: _stitches_react_types_theme.Token<"lg", string, "radii", "">;
        full: _stitches_react_types_theme.Token<"full", string, "radii", "">;
    };
    space: {
        1: _stitches_react_types_theme.Token<"1", string, "space", "">;
        2: _stitches_react_types_theme.Token<"2", string, "space", "">;
        3: _stitches_react_types_theme.Token<"3", string, "space", "">;
        4: _stitches_react_types_theme.Token<"4", string, "space", "">;
        5: _stitches_react_types_theme.Token<"5", string, "space", "">;
        6: _stitches_react_types_theme.Token<"6", string, "space", "">;
        7: _stitches_react_types_theme.Token<"7", string, "space", "">;
        8: _stitches_react_types_theme.Token<"8", string, "space", "">;
        10: _stitches_react_types_theme.Token<"10", string, "space", "">;
        12: _stitches_react_types_theme.Token<"12", string, "space", "">;
        16: _stitches_react_types_theme.Token<"16", string, "space", "">;
        20: _stitches_react_types_theme.Token<"20", string, "space", "">;
        40: _stitches_react_types_theme.Token<"40", string, "space", "">;
        64: _stitches_react_types_theme.Token<"64", string, "space", "">;
        80: _stitches_react_types_theme.Token<"80", string, "space", "">;
    };
    boxShadow: {
        white: _stitches_react_types_theme.Token<"white", string, "boxShadow", "">;
        black: _stitches_react_types_theme.Token<"black", string, "boxShadow", "">;
        gray100: _stitches_react_types_theme.Token<"gray100", string, "boxShadow", "">;
        gray150: _stitches_react_types_theme.Token<"gray150", string, "boxShadow", "">;
        gray200: _stitches_react_types_theme.Token<"gray200", string, "boxShadow", "">;
        gray300: _stitches_react_types_theme.Token<"gray300", string, "boxShadow", "">;
        gray400: _stitches_react_types_theme.Token<"gray400", string, "boxShadow", "">;
        gray500: _stitches_react_types_theme.Token<"gray500", string, "boxShadow", "">;
        gray600: _stitches_react_types_theme.Token<"gray600", string, "boxShadow", "">;
        gray700: _stitches_react_types_theme.Token<"gray700", string, "boxShadow", "">;
        gray800: _stitches_react_types_theme.Token<"gray800", string, "boxShadow", "">;
        alosixG200: _stitches_react_types_theme.Token<"alosixG200", string, "boxShadow", "">;
        alosixG300: _stitches_react_types_theme.Token<"alosixG300", string, "boxShadow", "">;
        alosixG500: _stitches_react_types_theme.Token<"alosixG500", string, "boxShadow", "">;
        alosixY100: _stitches_react_types_theme.Token<"alosixY100", string, "boxShadow", "">;
        alosixY300: _stitches_react_types_theme.Token<"alosixY300", string, "boxShadow", "">;
        alosixY500: _stitches_react_types_theme.Token<"alosixY500", string, "boxShadow", "">;
        alosixR200: _stitches_react_types_theme.Token<"alosixR200", string, "boxShadow", "">;
        alosixR500: _stitches_react_types_theme.Token<"alosixR500", string, "boxShadow", "">;
        alosixR700: _stitches_react_types_theme.Token<"alosixR700", string, "boxShadow", "">;
    };
};
declare const createTheme: <Argument0 extends string | ({
    colors?: {
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray150?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        alosixG200?: string | number | boolean | undefined;
        alosixG300?: string | number | boolean | undefined;
        alosixG500?: string | number | boolean | undefined;
        alosixY100?: string | number | boolean | undefined;
        alosixY300?: string | number | boolean | undefined;
        alosixY500?: string | number | boolean | undefined;
        alosixR200?: string | number | boolean | undefined;
        alosixR500?: string | number | boolean | undefined;
        alosixR700?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xxs?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
        '6xl'?: string | number | boolean | undefined;
        '7xl'?: string | number | boolean | undefined;
        '8xl'?: string | number | boolean | undefined;
        '9xl'?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        regular?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        default?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        shorter?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        tall?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        px?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
    } | undefined;
    boxShadow?: {
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray150?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        alosixG200?: string | number | boolean | undefined;
        alosixG300?: string | number | boolean | undefined;
        alosixG500?: string | number | boolean | undefined;
        alosixY100?: string | number | boolean | undefined;
        alosixY300?: string | number | boolean | undefined;
        alosixY500?: string | number | boolean | undefined;
        alosixR200?: string | number | boolean | undefined;
        alosixR500?: string | number | boolean | undefined;
        alosixR700?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
}), Argument1 extends string | ({
    colors?: {
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray150?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        alosixG200?: string | number | boolean | undefined;
        alosixG300?: string | number | boolean | undefined;
        alosixG500?: string | number | boolean | undefined;
        alosixY100?: string | number | boolean | undefined;
        alosixY300?: string | number | boolean | undefined;
        alosixY500?: string | number | boolean | undefined;
        alosixR200?: string | number | boolean | undefined;
        alosixR500?: string | number | boolean | undefined;
        alosixR700?: string | number | boolean | undefined;
    } | undefined;
    fontSizes?: {
        xxs?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        xl?: string | number | boolean | undefined;
        '2xl'?: string | number | boolean | undefined;
        '4xl'?: string | number | boolean | undefined;
        '5xl'?: string | number | boolean | undefined;
        '6xl'?: string | number | boolean | undefined;
        '7xl'?: string | number | boolean | undefined;
        '8xl'?: string | number | boolean | undefined;
        '9xl'?: string | number | boolean | undefined;
    } | undefined;
    fontWeights?: {
        regular?: string | number | boolean | undefined;
        medium?: string | number | boolean | undefined;
        bold?: string | number | boolean | undefined;
    } | undefined;
    fonts?: {
        default?: string | number | boolean | undefined;
        code?: string | number | boolean | undefined;
    } | undefined;
    lineHeights?: {
        shorter?: string | number | boolean | undefined;
        short?: string | number | boolean | undefined;
        base?: string | number | boolean | undefined;
        tall?: string | number | boolean | undefined;
    } | undefined;
    radii?: {
        px?: string | number | boolean | undefined;
        xs?: string | number | boolean | undefined;
        sm?: string | number | boolean | undefined;
        md?: string | number | boolean | undefined;
        lg?: string | number | boolean | undefined;
        full?: string | number | boolean | undefined;
    } | undefined;
    space?: {
        1?: string | number | boolean | undefined;
        2?: string | number | boolean | undefined;
        3?: string | number | boolean | undefined;
        4?: string | number | boolean | undefined;
        5?: string | number | boolean | undefined;
        6?: string | number | boolean | undefined;
        7?: string | number | boolean | undefined;
        8?: string | number | boolean | undefined;
        10?: string | number | boolean | undefined;
        12?: string | number | boolean | undefined;
        16?: string | number | boolean | undefined;
        20?: string | number | boolean | undefined;
        40?: string | number | boolean | undefined;
        64?: string | number | boolean | undefined;
        80?: string | number | boolean | undefined;
    } | undefined;
    boxShadow?: {
        white?: string | number | boolean | undefined;
        black?: string | number | boolean | undefined;
        gray100?: string | number | boolean | undefined;
        gray150?: string | number | boolean | undefined;
        gray200?: string | number | boolean | undefined;
        gray300?: string | number | boolean | undefined;
        gray400?: string | number | boolean | undefined;
        gray500?: string | number | boolean | undefined;
        gray600?: string | number | boolean | undefined;
        gray700?: string | number | boolean | undefined;
        gray800?: string | number | boolean | undefined;
        alosixG200?: string | number | boolean | undefined;
        alosixG300?: string | number | boolean | undefined;
        alosixG500?: string | number | boolean | undefined;
        alosixY100?: string | number | boolean | undefined;
        alosixY300?: string | number | boolean | undefined;
        alosixY500?: string | number | boolean | undefined;
        alosixR200?: string | number | boolean | undefined;
        alosixR500?: string | number | boolean | undefined;
        alosixR700?: string | number | boolean | undefined;
    } | undefined;
} & {
    [x: string]: {
        [x: string]: string | number | boolean;
        [x: number]: string | number | boolean;
    };
})>(nameOrScalesArg0: Argument0, nameOrScalesArg1?: Argument1 | undefined) => string & {
    className: string;
    selector: string;
} & (Argument0 extends string ? _stitches_react_types_stitches.ThemeTokens<Argument1, ""> : _stitches_react_types_stitches.ThemeTokens<Argument0, "">);
declare const config: {
    prefix: "";
    media: {
        $xs: "@media (min-width: 480px)";
        $sm: "@media (min-width: 640px)";
        $md: "@media (min-width: 1024px)";
        $lg: "@media (min-width: 1280px)";
    };
    theme: {
        colors: {
            white: string;
            black: string;
            gray100: string;
            gray150: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            alosixG200: string;
            alosixG300: string;
            alosixG500: string;
            alosixY100: string;
            alosixY300: string;
            alosixY500: string;
            alosixR200: string;
            alosixR500: string;
            alosixR700: string;
        };
        fontSizes: {
            xxs: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            xl: string;
            '2xl': string;
            '4xl': string;
            '5xl': string;
            '6xl': string;
            '7xl': string;
            '8xl': string;
            '9xl': string;
        };
        fontWeights: {
            regular: string;
            medium: string;
            bold: string;
        };
        fonts: {
            default: string;
            code: string;
        };
        lineHeights: {
            shorter: string;
            short: string;
            base: string;
            tall: string;
        };
        radii: {
            px: string;
            xs: string;
            sm: string;
            md: string;
            lg: string;
            full: string;
        };
        space: {
            1: string;
            2: string;
            3: string;
            4: string;
            5: string;
            6: string;
            7: string;
            8: string;
            10: string;
            12: string;
            16: string;
            20: string;
            40: string;
            64: string;
            80: string;
        };
        boxShadow: {
            white: string;
            black: string;
            gray100: string;
            gray150: string;
            gray200: string;
            gray300: string;
            gray400: string;
            gray500: string;
            gray600: string;
            gray700: string;
            gray800: string;
            alosixG200: string;
            alosixG300: string;
            alosixG500: string;
            alosixY100: string;
            alosixY300: string;
            alosixY500: string;
            alosixR200: string;
            alosixR500: string;
            alosixR700: string;
        };
    };
    themeMap: {
        height: "space";
        width: "space";
        gap: "space";
        gridGap: "space";
        columnGap: "space";
        gridColumnGap: "space";
        rowGap: "space";
        gridRowGap: "space";
        inset: "space";
        insetBlock: "space";
        insetBlockEnd: "space";
        insetBlockStart: "space";
        insetInline: "space";
        insetInlineEnd: "space";
        insetInlineStart: "space";
        margin: "space";
        marginTop: "space";
        marginRight: "space";
        marginBottom: "space";
        marginLeft: "space";
        marginBlock: "space";
        marginBlockEnd: "space";
        marginBlockStart: "space";
        marginInline: "space";
        marginInlineEnd: "space";
        marginInlineStart: "space";
        padding: "space";
        paddingTop: "space";
        paddingRight: "space";
        paddingBottom: "space";
        paddingLeft: "space";
        paddingBlock: "space";
        paddingBlockEnd: "space";
        paddingBlockStart: "space";
        paddingInline: "space";
        paddingInlineEnd: "space";
        paddingInlineStart: "space";
        scrollMargin: "space";
        scrollMarginTop: "space";
        scrollMarginRight: "space";
        scrollMarginBottom: "space";
        scrollMarginLeft: "space";
        scrollMarginBlock: "space";
        scrollMarginBlockEnd: "space";
        scrollMarginBlockStart: "space";
        scrollMarginInline: "space";
        scrollMarginInlineEnd: "space";
        scrollMarginInlineStart: "space";
        scrollPadding: "space";
        scrollPaddingTop: "space";
        scrollPaddingRight: "space";
        scrollPaddingBottom: "space";
        scrollPaddingLeft: "space";
        scrollPaddingBlock: "space";
        scrollPaddingBlockEnd: "space";
        scrollPaddingBlockStart: "space";
        scrollPaddingInline: "space";
        scrollPaddingInlineEnd: "space";
        scrollPaddingInlineStart: "space";
        top: "space";
        right: "space";
        bottom: "space";
        left: "space";
        fontSize: "fontSizes";
        background: "colors";
        backgroundColor: "colors";
        backgroundImage: "colors";
        borderImage: "colors";
        border: "colors";
        borderBlock: "colors";
        borderBlockEnd: "colors";
        borderBlockStart: "colors";
        borderBottom: "colors";
        borderBottomColor: "colors";
        borderColor: "colors";
        borderInline: "colors";
        borderInlineEnd: "colors";
        borderInlineStart: "colors";
        borderLeft: "colors";
        borderLeftColor: "colors";
        borderRight: "colors";
        borderRightColor: "colors";
        borderTop: "colors";
        borderTopColor: "colors";
        caretColor: "colors";
        color: "colors";
        columnRuleColor: "colors";
        outline: "colors";
        outlineColor: "colors";
        fill: "colors";
        stroke: "colors";
        textDecorationColor: "colors";
        fontFamily: "fonts";
        fontWeight: "fontWeights";
        lineHeight: "lineHeights";
        letterSpacing: "letterSpacings";
        blockSize: "sizes";
        minBlockSize: "sizes";
        maxBlockSize: "sizes";
        inlineSize: "sizes";
        minInlineSize: "sizes";
        maxInlineSize: "sizes";
        minWidth: "sizes";
        maxWidth: "sizes";
        minHeight: "sizes";
        maxHeight: "sizes";
        flexBasis: "sizes";
        gridTemplateColumns: "sizes";
        gridTemplateRows: "sizes";
        borderWidth: "borderWidths";
        borderTopWidth: "borderWidths";
        borderLeftWidth: "borderWidths";
        borderRightWidth: "borderWidths";
        borderBottomWidth: "borderWidths";
        borderStyle: "borderStyles";
        borderTopStyle: "borderStyles";
        borderLeftStyle: "borderStyles";
        borderRightStyle: "borderStyles";
        borderBottomStyle: "borderStyles";
        borderRadius: "radii";
        borderTopLeftRadius: "radii";
        borderTopRightRadius: "radii";
        borderBottomRightRadius: "radii";
        borderBottomLeftRadius: "radii";
        boxShadow: "shadows";
        textShadow: "shadows";
        transition: "transitions";
        zIndex: "zIndices";
    };
    utils: {};
};
declare const darkTheme: string & {
    className: string;
    selector: string;
} & _stitches_react_types_stitches.ThemeTokens<{
    colors: {
        white: string;
        black: string;
        gray100: string;
        gray150: string;
        gray200: string;
        gray300: string;
        gray400: string;
        gray500: string;
        gray600: string;
        gray700: string;
        gray800: string;
        alosixG200: string;
        alosixG300: string;
        alosixG500: string;
        alosixY100: string;
        alosixY300: string;
        alosixY500: string;
        alosixR200: string;
        alosixR500: string;
        alosixR700: string;
    };
    space: {};
    fonts: {};
}, "">;

export { Avatar, AvatarProps, Box, BoxProps, Button, ButtonProps, Checkbox, CheckboxProps, Dialog, DialogClose, DialogProps, DialogRoot, DialogTrigger, Grid, GridProps, Heading, HeadingProps, MultiStep, MultiStepProps, Select, SelectAdvanced, SelectAdvancedProps, SelectItemProps, SelectProps, Text, TextArea, TextAreaProps, TextInput, TextInputProps, TextProps, Toast, ToastProps, Tooltip, TooltipProps, config, createTheme, css, darkTheme, getCssText, globalCss, keyframes, styled, theme };
